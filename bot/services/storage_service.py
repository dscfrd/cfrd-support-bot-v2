"""File storage service"""

import logging
import datetime
from config import STORAGE_CHANNEL_ID

logger = logging.getLogger(__name__)


async def upload_file_to_storage(client, message, file_name):
    """Upload file to storage channel"""
    try:
        from bot.database import get_connection
        db_connection = get_connection()
        cursor = db_connection.cursor()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
        cursor.execute('SELECT file_name FROM storage_files WHERE file_name = ?', (file_name,))
        if cursor.fetchone():
            await message.reply_text(f"‚ùå –§–∞–π–ª —Å –∏–º–µ–Ω–µ–º '{file_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /replace –¥–ª—è –∑–∞–º–µ–Ω—ã.")
            return False, None

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ –∫–∞–Ω–∞–ª —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        sent_message = await client.copy_message(
            chat_id=STORAGE_CHANNEL_ID,
            from_chat_id=message.chat.id,
            message_id=message.id,
            caption=f"üìÅ {file_name}"
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –≤ –ë–î
        file_id = None
        file_type = None

        if message.document:
            file_id = message.document.file_id
            file_type = "document"
        elif message.photo:
            file_id = message.photo.file_id
            file_type = "photo"
        elif message.video:
            file_id = message.video.file_id
            file_type = "video"

        cursor.execute('''
        INSERT INTO storage_files (file_name, file_id, message_id, file_type, upload_date, uploaded_by)
        VALUES (?, ?, ?, ?, ?, ?)
        ''', (file_name, file_id, sent_message.id, file_type, datetime.datetime.now(), message.from_user.id))

        db_connection.commit()

        await message.reply_text(f"‚úÖ –§–∞–π–ª '{file_name}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ!")
        logger.info(f"–§–∞–π–ª '{file_name}' –∑–∞–≥—Ä—É–∂–µ–Ω –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")

        return True, file_name

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: {e}")
        await message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
        return False, None


async def get_files_list(client, message):
    """Get list of files in storage"""
    try:
        from bot.database import get_connection
        db_connection = get_connection()
        cursor = db_connection.cursor()

        cursor.execute('SELECT file_name, file_type, upload_date FROM storage_files ORDER BY upload_date DESC')
        files = cursor.fetchall()

        if not files:
            await message.reply_text("üìÅ –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø—É—Å—Ç–æ")
            return

        response = "üìÅ **–§–∞–π–ª—ã –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ**:\n\n"
        for file_name, file_type, upload_date in files:
            response += f"‚Ä¢ `{file_name}` ({file_type})\n"

        await message.reply_text(response)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {e}")
        await message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")


async def send_file_to_client(client, identifier, file_name, message, is_thread_id=True):
    """Send file from storage to client"""
    try:
        from bot.database import get_connection, get_client_by_thread
        db_connection = get_connection()
        cursor = db_connection.cursor()

        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        cursor.execute('SELECT message_id FROM storage_files WHERE file_name = ?', (file_name,))
        result = cursor.fetchone()

        if not result:
            await message.reply_text(f"‚ùå –§–∞–π–ª '{file_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")
            return

        storage_message_id = result[0]

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º client_id
        if is_thread_id:
            client_data = get_client_by_thread(db_connection, identifier)
            if not client_data:
                await message.reply_text(f"‚ùå –ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ç—Ä–µ–¥–∞ {identifier} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            client_id = client_data[0]
        else:
            # identifier —ç—Ç–æ custom_id
            cursor.execute('SELECT user_id FROM clients WHERE custom_id = ?', (identifier,))
            result = cursor.fetchone()
            if not result:
                await message.reply_text(f"‚ùå –ö–ª–∏–µ–Ω—Ç —Å ID '{identifier}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            client_id = result[0]

        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –∫–ª–∏–µ–Ω—Ç—É
        await client.copy_message(
            chat_id=client_id,
            from_chat_id=STORAGE_CHANNEL_ID,
            message_id=storage_message_id
        )

        await message.reply_text(f"‚úÖ –§–∞–π–ª '{file_name}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É")
        logger.info(f"–§–∞–π–ª '{file_name}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É {client_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ –∫–ª–∏–µ–Ω—Ç—É: {e}")
        await message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")


async def replace_file_in_storage(client, message, file_name):
    """Replace existing file in storage"""
    # TODO: Implement file replacement
    await message.reply_text("‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –∑–∞–º–µ–Ω—ã —Ñ–∞–π–ª–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    return False, None
