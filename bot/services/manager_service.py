"""Manager operations service"""

import logging
from pyrogram import types
from bot.database.queries import get_manager, save_message
from bot.utils import format_signature_with_custom_emoji, format_card_with_custom_emoji

logger = logging.getLogger(__name__)


def get_utf16_length(text: str) -> int:
    """
    –ü–æ–ª—É—á–∏—Ç—å –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –≤ UTF-16 code units (–∫–∞–∫ —Ç—Ä–µ–±—É–µ—Ç Telegram API)

    Args:
        text: –¢–µ–∫—Å—Ç –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è

    Returns:
        –î–ª–∏–Ω–∞ –≤ UTF-16 code units
    """
    return len(text.encode('utf-16-le')) // 2


async def send_manager_reply_to_client(client, manager_id, client_id, reply_text):
    """Send manager's reply to client"""
    try:
        from bot.database import get_connection
        db_connection = get_connection()

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–Ω–µ–¥–∂–µ—Ä–µ
        manager = get_manager(db_connection, manager_id)

        if not manager:
            logger.error(f"–ú–µ–Ω–µ–¥–∂–µ—Ä {manager_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return False

        # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        _, emoji, name, position, extension, photo_file_id, auth_date, username = manager

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ —ç–º–æ–¥–∑–∏
        signature_text, signature_entities = format_signature_with_custom_emoji(
            emoji, name, position, extension
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        full_message = f"{reply_text}\n\n{signature_text}"

        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º offset'—ã entities –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        adjusted_entities = None
        if signature_entities:
            # –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –¥–æ –ø–æ–¥–ø–∏—Å–∏ (reply_text + "\n\n") –≤ UTF-16
            offset_adjustment = get_utf16_length(reply_text + "\n\n")
            adjusted_entities = []
            for entity in signature_entities:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π entity —Å —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º offset
                adjusted_entity = types.MessageEntity(
                    type=entity.type,
                    offset=entity.offset + offset_adjustment,
                    length=entity.length,
                    custom_emoji_id=entity.custom_emoji_id
                )
                adjusted_entities.append(adjusted_entity)
            logger.info(f"üìù –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(adjusted_entities)} entities —Å offset +{offset_adjustment} (UTF-16)")
            logger.info(f"üìù Full message: {full_message}")
            logger.info(f"üìù Entities: {adjusted_entities}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É —Å entities –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —ç–º–æ–¥–∑–∏
        await client.send_message(
            chat_id=client_id,
            text=full_message,
            entities=adjusted_entities
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        save_message(db_connection, client_id, reply_text, is_from_user=False)

        logger.info(f"–û—Ç–≤–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ {manager_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É {client_id}")
        return True

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É: {e}")
        return False


async def send_manager_media_to_client(client, manager_id, client_id, file_id, caption, media_type):
    """Send media file from manager to client"""
    try:
        from bot.database import get_connection
        db_connection = get_connection()

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–Ω–µ–¥–∂–µ—Ä–µ
        manager = get_manager(db_connection, manager_id)

        if not manager:
            logger.error(f"–ú–µ–Ω–µ–¥–∂–µ—Ä {manager_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return False

        # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        _, emoji, name, position, extension, photo_file_id, auth_date, username = manager

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ —ç–º–æ–¥–∑–∏
        signature_text, signature_entities = format_signature_with_custom_emoji(
            emoji, name, position, extension
        )

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫ –ø–æ–¥–ø–∏—Å–∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if caption:
            full_caption = f"{caption}\n\n{signature_text}"
        else:
            full_caption = signature_text

        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º offset'—ã entities –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ caption
        adjusted_entities = None
        if signature_entities:
            if caption:
                # –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –¥–æ –ø–æ–¥–ø–∏—Å–∏ (caption + "\n\n") –≤ UTF-16
                offset_adjustment = get_utf16_length(caption + "\n\n")
                adjusted_entities = []
                for entity in signature_entities:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π entity —Å —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º offset
                    adjusted_entity = types.MessageEntity(
                        type=entity.type,
                        offset=entity.offset + offset_adjustment,
                        length=entity.length,
                        custom_emoji_id=entity.custom_emoji_id
                    )
                    adjusted_entities.append(adjusted_entity)
                logger.info(f"üìù –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(adjusted_entities)} entities –¥–ª—è caption —Å offset +{offset_adjustment} (UTF-16)")
                logger.info(f"üìù Full caption: {full_caption}")
                logger.info(f"üìù Entities: {adjusted_entities}")
            else:
                # –ï—Å–ª–∏ caption –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º entities –∫–∞–∫ –µ—Å—Ç—å
                adjusted_entities = signature_entities
                logger.info(f"üìù –ò—Å–ø–æ–ª—å–∑—É–µ–º {len(adjusted_entities)} entities –±–µ–∑ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ (–Ω–µ—Ç caption)")
                logger.info(f"üìù Entities: {adjusted_entities}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if media_type == "photo":
            await client.send_photo(
                chat_id=client_id,
                photo=file_id,
                caption=full_caption,
                caption_entities=adjusted_entities
            )
        elif media_type == "document":
            await client.send_document(
                chat_id=client_id,
                document=file_id,
                caption=full_caption,
                caption_entities=adjusted_entities
            )
        elif media_type == "video":
            await client.send_video(
                chat_id=client_id,
                video=file_id,
                caption=full_caption,
                caption_entities=adjusted_entities
            )
        elif media_type == "audio":
            await client.send_audio(
                chat_id=client_id,
                audio=file_id,
                caption=full_caption,
                caption_entities=adjusted_entities
            )
        elif media_type == "voice":
            await client.send_voice(
                chat_id=client_id,
                voice=file_id,
                caption=full_caption,
                caption_entities=adjusted_entities
            )
        else:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –º–µ–¥–∏–∞: {media_type}")
            return False

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        save_message(db_connection, client_id, caption or "", is_from_user=False, media_type=media_type.upper())

        logger.info(f"–ú–µ–¥–∏–∞—Ñ–∞–π–ª ({media_type}) –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ {manager_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É {client_id}")
        return True

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –∫–ª–∏–µ–Ω—Ç—É: {e}")
        return False


async def send_manager_card_to_client(client, manager_id, client_id):
    """Send manager's contact card to client"""
    try:
        from bot.database import get_connection
        db_connection = get_connection()

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–Ω–µ–¥–∂–µ—Ä–µ
        manager = get_manager(db_connection, manager_id)

        if not manager:
            logger.error(f"–ú–µ–Ω–µ–¥–∂–µ—Ä {manager_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return False

        # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        _, emoji, name, position, extension, photo_file_id, auth_date, username = manager

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ —ç–º–æ–¥–∑–∏
        card_text, card_entities = format_card_with_custom_emoji(
            emoji, name, position, extension, username
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Å —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if photo_file_id:
            await client.send_photo(
                chat_id=client_id,
                photo=photo_file_id,
                caption=card_text,
                caption_entities=card_entities
            )
        else:
            # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
            await client.send_message(
                chat_id=client_id,
                text=card_text,
                entities=card_entities
            )

        logger.info(f"–ö–∞—Ä—Ç–æ—á–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ {manager_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç—É {client_id}")
        return True

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")
        return False
