"""Handlers for manager commands"""

import datetime
import logging
import re
from pyrogram import filters

from bot.database import (
    get_connection,
    get_manager,
    save_manager,
    update_manager_photo,
    get_client_by_thread,
    get_all_active_threads,
    assign_duty_manager,
    get_duty_manager,
    is_first_reply,
    save_first_reply,
    update_manager_reply_time,
    unpack_manager_data,
)
from bot.services import (
    send_manager_reply_to_client,
    send_manager_card_to_client,
    mark_thread_urgent,
    edit_thread_title,
)
from bot.utils import generate_client_id
from config import SUPPORT_GROUP_ID

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
manager_auth_state = {}


def setup_manager_handlers(app):
    """Setup handlers for manager commands"""

    @app.on_message(filters.command("auth") & filters.chat(SUPPORT_GROUP_ID))
    async def handle_auth(client, message):
        """Handle manager authorization"""
        try:
            manager_id = message.from_user.id
            manager_username = message.from_user.username

            logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /auth –æ—Ç {manager_id} (username: {manager_username})")

            command_text = message.text.strip()

            if " " not in command_text:
                await message.reply_text(
                    "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                    "/auth [—ç–º–æ–¥–∑–∏], [–ò–º—è], [–î–æ–ª–∂–Ω–æ—Å—Ç—å], [4 —Ü–∏—Ñ—Ä—ã]\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: /auth üîß, –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤, –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç, 1234"
                )
                return

            auth_data = command_text.split(" ", 1)[1]
            parts = [part.strip() for part in auth_data.split(",")]

            if len(parts) < 4:
                await message.reply_text(
                    "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –¢—Ä–µ–±—É–µ—Ç—Å—è: [—ç–º–æ–¥–∑–∏], [–ò–º—è], [–î–æ–ª–∂–Ω–æ—Å—Ç—å], [4 —Ü–∏—Ñ—Ä—ã]"
                )
                return

            emoji = parts[0]
            name = parts[1]
            position = ", ".join(parts[2:-1])
            extension = parts[-1].strip()

            if not re.match(r'^\d{4}$', extension):
                await message.reply_text("–î–æ–±–∞–≤–æ—á–Ω—ã–π –Ω–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 4 —Ü–∏—Ñ—Ä")
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            db_connection = get_connection()
            save_manager(db_connection, manager_id, emoji, name, position, extension, username=manager_username)

            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
            await message.reply_text(
                "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.\n"
                "–§–æ—Ç–æ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–æ –∫–ª–∏–µ–Ω—Ç–∞–º –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ."
            )

            manager_auth_state[manager_id] = "waiting_photo"

            logger.info(f"–ú–µ–Ω–µ–¥–∂–µ—Ä {manager_id} ({name}) –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            await message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

    @app.on_message(filters.photo & filters.chat(SUPPORT_GROUP_ID), group=-1)
    async def handle_manager_photo(client, message):
        """Handle manager photo upload"""
        try:
            manager_id = message.from_user.id

            if manager_id in manager_auth_state and manager_auth_state[manager_id] == "waiting_photo":
                db_connection = get_connection()
                manager = get_manager(db_connection, manager_id)

                if manager:
                    photo_file_id = message.photo.file_id
                    update_manager_photo(db_connection, manager_id, photo_file_id)

                    del manager_auth_state[manager_id]

                    await message.reply_text(
                        "‚úÖ –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ! –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n"
                        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—á–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞–º."
                    )

                    logger.info(f"–§–æ—Ç–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ {manager_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
                    return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")

        return False

    @app.on_message(filters.regex(r"^/\d+") & filters.chat(SUPPORT_GROUP_ID))
    async def handle_thread_command(client, message):
        """Handle /{thread_id} command"""
        try:
            manager_id = message.from_user.id
            command_text = message.text.strip()

            # –ò–∑–≤–ª–µ–∫–∞–µ–º thread_id
            first_word = command_text.split()[0]
            thread_id = int(first_word[1:])

            logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /{thread_id} –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ {manager_id}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            db_connection = get_connection()
            manager = get_manager(db_connection, manager_id)

            if not manager:
                await message.reply_text(
                    "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /auth –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."
                )
                return

            # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            client_data = get_client_by_thread(db_connection, thread_id)

            if not client_data:
                await message.reply_text(
                    f"–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ç—Ä–µ–¥–∞ {thread_id} –Ω–µ –Ω–∞–π–¥–µ–Ω."
                )
                return

            client_id = client_data[0]

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
            if " " in command_text:
                reply_text = command_text.split(" ", 1)[1]
            else:
                await message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            success = await send_manager_reply_to_client(client, manager_id, client_id, reply_text)

            if success:
                update_manager_reply_time(db_connection, thread_id)
                await mark_thread_urgent(client, thread_id, is_urgent=False)

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç
                is_first = is_first_reply(db_connection, thread_id, manager_id)

                if is_first:
                    save_first_reply(db_connection, thread_id, client_id, manager_id)

                    _, emoji, name, position, extension, photo_file_id, auth_date, username = unpack_manager_data(manager)

                    if username:
                        assign_duty_manager(db_connection, thread_id, username, manager_id)
                        await message.reply_text(
                            f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º –∑–∞ –∫–ª–∏–µ–Ω—Ç–∞ (—Ç—Ä–µ–¥ #{thread_id})."
                        )

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ—Ç–≤–µ—Ç–µ
                        await send_manager_card_to_client(client, manager_id, client_id)
                    else:
                        await message.reply_text("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
                else:
                    await message.reply_text("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")

                logger.info(f"–û—Ç–≤–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ {manager_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É {client_id}")
            else:
                await message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç.")

        except ValueError:
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: {message.text}")
            await message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /{thread_id} {—Ç–µ–∫—Å—Ç}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã: {e}")
            await message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

    @app.on_message(filters.command("wtt") & filters.chat(SUPPORT_GROUP_ID))
    async def handle_wtt(client, message):
        """Handle /wtt (what thread this) command"""
        try:
            db_connection = get_connection()

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º thread_id
            thread_id = None

            if hasattr(message, 'message_thread_id') and message.message_thread_id:
                thread_id = message.message_thread_id
            elif message.reply_to_message:
                thread_id = message.reply_to_message.id

            if not thread_id:
                await message.reply_text(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID —Ç—Ä–µ–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ç—Ä–µ–¥–µ –∫–ª–∏–µ–Ω—Ç–∞."
                )
                return

            logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /wtt –¥–ª—è —Ç—Ä–µ–¥–∞ {thread_id}")

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
            client_data = get_client_by_thread(db_connection, thread_id)

            if not client_data:
                await message.reply_text(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–¥–µ #{thread_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return

            user_id, first_name, last_name, username, first_contact, last_contact, message_count, _, custom_id = client_data

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è
            client_name = f"{first_name or ''}"
            if last_name:
                client_name += f" {last_name}"
            if username:
                client_name += f" (@{username})"

            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ
            duty_manager = get_duty_manager(db_connection, thread_id)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            info = f"üìä **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–¥–µ #{thread_id}**\n\n"
            info += f"**–ö–ª–∏–µ–Ω—Ç**: {client_name}\n"
            info += f"**ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**: `{user_id}`\n"

            if custom_id:
                info += f"**ID –∫–ª–∏–µ–Ω—Ç–∞**: `{custom_id}`\n"

            info += f"**–ü–µ—Ä–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ**: {first_contact}\n"
            info += f"**–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ**: {last_contact}\n"
            info += f"**–°–æ–æ–±—â–µ–Ω–∏–π**: {message_count}\n"
            info += f"**–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π**: {f'@{duty_manager}' if duty_manager else '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}\n\n"

            info += "**–î–ª—è –æ—Ç–≤–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ**:\n"

            if custom_id:
                info += f"`/#{custom_id} —Ç–µ–∫—Å—Ç` (–ø–æ ID –∫–ª–∏–µ–Ω—Ç–∞)\n"

            info += f"`/{thread_id} —Ç–µ–∫—Å—Ç` (–ø–æ –Ω–æ–º–µ—Ä—É —Ç—Ä–µ–¥–∞)"

            await message.reply_text(info)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /wtt: {e}")
            await message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

    @app.on_message(filters.command("threads") & filters.chat(SUPPORT_GROUP_ID))
    async def handle_threads(client, message):
        """Handle /threads command"""
        try:
            db_connection = get_connection()

            manager = get_manager(db_connection, message.from_user.id)
            if not manager:
                await message.reply_text(
                    "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /auth."
                )
                return

            threads = get_all_active_threads(db_connection)

            if not threads:
                await message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–¥–æ–≤.")
                return

            response = "üìã **–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–¥–æ–≤**:\n\n"

            for thread in threads:
                thread_id, user_id, first_name, last_name, username, assigned_manager, last_message_time = thread

                client_name = f"{first_name or ''}"
                if last_name:
                    client_name += f" {last_name}"
                if username:
                    client_name += f" (@{username})"

                response += f"üîπ **–¢—Ä–µ–¥ #{thread_id}** - {client_name}\n"
                response += f"   üë®‚Äçüíº –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {assigned_manager or '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}\n\n"

            await message.reply_text(response)

            logger.info(f"–°–ø–∏—Å–æ–∫ —Ç—Ä–µ–¥–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –≤—Å–µ–≥–æ {len(threads)} —Ç—Ä–µ–¥–æ–≤")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç—Ä–µ–¥–æ–≤: {e}")
            await message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

    @app.on_message(filters.command("help") & filters.chat(SUPPORT_GROUP_ID))
    async def handle_help(client, message):
        """Handle /help command"""
        help_text = """
üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã**:

‚öôÔ∏è **–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏**:
- `/{ID_—Ç—Ä–µ–¥–∞} [—Ç–µ–∫—Å—Ç]` - –û—Ç–≤–µ—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É
- `/wtt` - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —Ç—Ä–µ–¥–µ
- `/card {ID_—Ç—Ä–µ–¥–∞}` - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é –∫–∞—Ä—Ç–æ—á–∫—É
- `/threads` - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–¥–æ–≤

‚öôÔ∏è **–ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è**:
- `/auth [—ç–º–æ–¥–∑–∏], [–ò–º—è], [–î–æ–ª–∂–Ω–æ—Å—Ç—å], [4 —Ü–∏—Ñ—Ä—ã]` - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
- `/help` - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

‚ÑπÔ∏è **–û –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö**:
- –ü–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç–∏–≤—à–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç—Å—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º
- –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–æ–ª—É—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
"""
        await message.reply_text(help_text)

    @app.on_message(filters.command("myinfo") & filters.chat(SUPPORT_GROUP_ID))
    async def handle_myinfo(client, message):
        """Handle /myinfo command"""
        try:
            manager_id = message.from_user.id
            db_connection = get_connection()

            manager = get_manager(db_connection, manager_id)

            if not manager:
                await message.reply_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /auth.")
                return

            _, emoji, name, position, extension, photo_file_id, auth_date, username = manager

            info = "–í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n\n"
            info += f"ID: {manager_id}\n"
            info += f"Emoji: {emoji}\n"
            info += f"–ò–º—è: {name}\n"
            info += f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {position}\n"
            info += f"–î–æ–±–∞–≤–æ—á–Ω—ã–π: {extension}\n"
            info += f"Username: {username}\n"
            info += f"–§–æ—Ç–æ: {'–ó–∞–≥—Ä—É–∂–µ–Ω–æ' if photo_file_id else '–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ'}\n"

            await message.reply_text(info)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /myinfo: {e}")
            await message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

    @app.on_message(filters.command("set_id") & filters.chat(SUPPORT_GROUP_ID))
    async def handle_set_id(client, message):
        """Handle /set_id command"""
        try:
            manager_id = message.from_user.id
            db_connection = get_connection()

            manager = get_manager(db_connection, manager_id)
            if not manager:
                await message.reply_text("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /auth.")
                return

            parts = message.text.split()

            if len(parts) < 2:
                await message.reply_text(
                    "–§–æ—Ä–º–∞—Ç: /set_id {ID_—Ç—Ä–µ–¥–∞} [–∂–µ–ª–∞–µ–º—ã–π_ID]"
                )
                return

            thread_id = int(parts[1])

            client_data = get_client_by_thread(db_connection, thread_id)
            if not client_data:
                await message.reply_text(f"–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ç—Ä–µ–¥–∞ {thread_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            client_id = client_data[0]

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–π ID
            if len(parts) > 2:
                custom_id = parts[2].upper()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ ID
                cursor = db_connection.cursor()
                cursor.execute('SELECT user_id FROM clients WHERE custom_id = ? AND user_id != ?',
                             (custom_id, client_id))

                if cursor.fetchone():
                    await message.reply_text(f"ID {custom_id} —É–∂–µ –∑–∞–Ω—è—Ç.")
                    return

                cursor.execute('UPDATE clients SET custom_id = ? WHERE user_id = ?',
                             (custom_id, client_id))
                db_connection.commit()
            else:
                custom_id = generate_client_id(db_connection, client_id, manager_id)

            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç—Ä–µ–¥–∞
            client_name = f"{client_data[1] or ''}"
            if client_data[2]:
                client_name += f" {client_data[2]}"
            if client_data[3]:
                client_name += f" (@{client_data[3]})"

            new_title = f"{custom_id} | {client_name} | —Ç—Ä–µ–¥ {thread_id}"
            await edit_thread_title(client, thread_id, new_title)

            await message.reply_text(
                f"‚úÖ –ö–ª–∏–µ–Ω—Ç—É –Ω–∞–∑–Ω–∞—á–µ–Ω ID: **{custom_id}**\n\n"
                f"–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –æ—Ç–≤–µ—á–∞—Ç—å –∫–æ–º–∞–Ω–¥–æ–π: `/#{custom_id} —Ç–µ–∫—Å—Ç`"
            )

            logger.info(f"–ö–ª–∏–µ–Ω—Ç—É {client_id} –Ω–∞–∑–Ω–∞—á–µ–Ω ID {custom_id}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ ID: {e}")
            await message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
